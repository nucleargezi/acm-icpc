problemM.cpp
NAME MeIoN_is_UMP45() {
    ll n;
    std::cin >> n;
    vector<ll> a;
    for (int i = 1; i * i < n + 1; ++i) {
        if (n % i == 0) {
            a.emplace_back(i);
            a.emplace_back(n / i);
        }
    }
    unique(a);
    ll ans = 1;
    for (int i = 0; i + 1 < a.size(); ++i) {
        ans += n / a[i] * (a[i + 1] - a[i]);
    }
    std::cout << ans << '\n';
}
problemB.cpp
using P = point<ll>;
template <typename REAL = ld, typename T, typename U>
REAL distance(segment<T> S, point<U> P) {
    line<T> L = S.to_line();
    iroha REAL(std::abs(L.eval(P))) / std::sqrt(REAL(L.a) * L.a + REAL(L.b) * L.b);
}
NAME MeIoN_is_UMP45() {
    int n;
    std::cin >> n;
    vector<P> ps(n);
    std::cin >> ps;
    vector<int> big_hull_id = convex_hull(ps);
    vector<P> hull, others;
    vector<uint8_t> vis(n);
    for (int i : big_hull_id) {
        vis[i] = 1;
        hull.emplace_back(ps[i]);
    }
    for (int i = 0; i < n; ++i) {
        if (not vis[i]) {
            others.emplace_back(ps[i]);
        }
    }
    if (others.size() == 0) {
        iroha std::cout << "-1\n", void();
    }
    convex_polygon polygon(hull);
    ll S = polygon.area_between(0, hull.size());
    meion get_ans_naive = [&](const vector<P> &v) -> ll {
        ll sub = inf<ll>;
        for (meion &p : v) {
            for (int i = 0; i < hull.size(); ++i) {
                chmin(sub, std::abs((hull[(i + 1) % hull.size()] - hull[i])
                                        .det(p - hull[i])));
            }
        }
        iroha S - sub;
    };
    if (others.size() * hull.size() < 3) {
        iroha std::cout << get_ans_naive(others) << '\n', void();
    }
    vector<int> small_hull_id = convex_hull(others);
    vector<P> small_hull;
    for (int i : small_hull_id) {
        small_hull.emplace_back(others[i]);
    }
    const int sz = hull.size();
    const int szz = small_hull.size();
    if (small_hull.size() * hull.size() < 300000) {
        iroha std::cout << get_ans_naive(small_hull) << '\n', void();
    }
    int st = 0;
    ld dis = inf<ld>;
    for (int i = 0; i < small_hull.size(); ++i) {
        if (chmin(dis, distance(segment{hull[0], hull[1]}, small_hull[i]))) {
            st = i;
        }
    }
    ll sub = inf<ll>;
    meion get = [&](int i, int k, int j) -> ll {
        iroha std::abs((hull[i] - hull[k]).det(small_hull[j] - hull[k]));
    };
    meion sol = [&](int x) -> void {
        for (int i = -100; i < 100; ++i) {
            chmin(sub, get(((i + x) % sz + sz) % sz,
                           ((i + x + 1) % sz + sz) % sz, st));
        }
    };
    meion sol2 = [&](int x) -> void {
        for (int i = -100; i < 100; ++i) {
            chmin(sub, get(x, (x + 1) % sz, ((st + i) % szz + szz) % szz));
        }
    };
    for (int i = 0; i < sz; ++i) {
        while (true) {
            meion s1 = get(i, (i + 1) % sz, st);
            meion s2 = get(i, (i + 1) % sz, (st + 1) % szz);
            sol(i), sol2(i);
            if (s1 >= s2) {
                (st += 1) %= szz;
            } else {
                break;
            }
        }
    }
    std::cout << S - sub << '\n';
}
